import logging
import json
import os
import random
from datetime import datetime, timedelta
from telegram import Update, InlineKeyboardButton, InlineKeyboardMarkup
from telegram.ext import Application, CommandHandler, CallbackQueryHandler, ContextTypes

# –ù–∞—Å—Ç—Ä–æ–π–∫–∞ –ª–æ–≥–∏—Ä–æ–≤–∞–Ω–∏—è
logging.basicConfig(
    format='%(asctime)s - %(name)s - %(levelname)s - %(message)s',
    level=logging.INFO
)
logger = logging.getLogger(__name__)

# –¢–æ–∫–µ–Ω –≤–∞—à–µ–≥–æ –±–æ—Ç–∞ –æ—Ç @BotFather
BOT_TOKEN = os.environ.get("BOT_TOKEN")

# –§–∞–π–ª –¥–ª—è —Ö—Ä–∞–Ω–µ–Ω–∏—è –¥–∞–Ω–Ω—ã—Ö
DATA_FILE = "user_data.json"

# –°–ø–∏—Å–æ–∫ –¥–µ–ª –ø–æ —É–º–æ–ª—á–∞–Ω–∏—é
DEFAULT_TASKS = [
    "–∫–∞—á–∞–ª–æ—á–∫–∞",
    "20 –º–∏–Ω—É—Ç —É–±–æ—Ä–∫–∏",
    "–Ω–µ –∑–∞—Ö–æ–¥–∏—Ç—å –≤ –ø–∞—Å—å—è–Ω",
    "–Ω–µ –∏–≥—Ä–∞—Ç—å –≤ –î–ò–ü–†–û–ö –°–¢–ê–õ–ö–†–ê–§–¢ –ò –ú–ò–ù–ò –ò–ì–†–´ –í–ö",

]

# –°–ø–∏—Å–æ–∫ —Å–∞–Ω–∫—Ü–∏–π (–º–æ–∂–Ω–æ –Ω–∞—Å—Ç—Ä–æ–∏—Ç—å –ø–æ–¥ —Å–µ–±—è)
SANCTIONS = [
    "—à—Ç—Ä–∞—Ñ 100 —Ä—É–±–ª–µ–π 89050375820 –æ–∑–æ–Ω –±–∞–Ω–∫",
    
    "—à—Ç—Ä–∞—Ñ 200 —Ä—É–±–ª–µ–π 89050375820 –æ–∑–æ–Ω –±–∞–Ω–∫",
    
    "—à—Ç—Ä–∞—Ñ 50 —Ä—É–±–ª–µ–π 89050375820 –æ–∑–æ–Ω –±–∞–Ω–∫",
    
    "—à—Ç—Ä–∞—Ñ 30 —Ä—É–±–ª–µ–π 89059375820 –æ–∑–æ–Ω –±–∞–Ω–∫",

    "—à—Ç—Ä–∞—Ñ 150 —Ä—É–±–ª–µ–π 89050375820 –æ–∑–æ–Ω –±–∞–Ω–∫",


]


class HabitTrackerBot:
    def __init__(self):
        self.user_data = self.load_data()

    def load_data(self):
        """–ó–∞–≥—Ä—É–∂–∞–µ–º –¥–∞–Ω–Ω—ã–µ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π –∏–∑ —Ñ–∞–π–ª–∞"""
        if os.path.exists(DATA_FILE):
            try:
                with open(DATA_FILE, 'r', encoding='utf-8') as f:
                    return json.load(f)
            except:
                return {}
        return {}

    def save_data(self):
        """–°–æ—Ö—Ä–∞–Ω—è–µ–º –¥–∞–Ω–Ω—ã–µ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π –≤ —Ñ–∞–π–ª"""
        try:
            with open(DATA_FILE, 'w', encoding='utf-8') as f:
                json.dump(self.user_data, f, ensure_ascii=False, indent=2)
        except Exception as e:
            logger.error(f"–û—à–∏–±–∫–∞ —Å–æ—Ö—Ä–∞–Ω–µ–Ω–∏—è –¥–∞–Ω–Ω—ã—Ö: {e}")

    def get_user_tasks(self, user_id):
        """–ü–æ–ª—É—á–∞–µ–º –∏–ª–∏ —Å–æ–∑–¥–∞–µ–º –∑–∞–¥–∞—á–∏ –¥–ª—è –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è"""
        user_id = str(user_id)

        if user_id not in self.user_data:
            # –°–æ–∑–¥–∞–µ–º –Ω–æ–≤–æ–≥–æ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
            self.user_data[user_id] = {
                'tasks': {task: False for task in DEFAULT_TASKS},
                'last_reset': datetime.now().isoformat(),
                'created_at': datetime.now().isoformat(),
                'sanctions_count': 0,
                'total_fails': 0
            }
            self.save_data()

        # –ü—Ä–æ–≤–µ—Ä—è–µ–º, –Ω—É–∂–Ω–æ –ª–∏ —Å–±—Ä–æ—Å–∏—Ç—å –∑–∞–¥–∞—á–∏ –Ω–∞ –Ω–æ–≤—ã–π –¥–µ–Ω—å
        self.check_daily_reset(user_id)

        return self.user_data[user_id]['tasks']

    def check_daily_reset(self, user_id):
        """–°–±—Ä–∞—Å—ã–≤–∞–µ–º –∑–∞–¥–∞—á–∏ –Ω–∞ –Ω–æ–≤—ã–π –¥–µ–Ω—å"""
        user_id = str(user_id)
        user = self.user_data[user_id]
        last_reset = datetime.fromisoformat(user['last_reset'])
        now = datetime.now()

        # –ï—Å–ª–∏ –ø—Ä–æ—à–ª–æ –±–æ–ª—å—à–µ 24 —á–∞—Å–æ–≤ - —Å–±—Ä–∞—Å—ã–≤–∞–µ–º –≤—Å–µ –∑–∞–¥–∞—á–∏
        if now - last_reset > timedelta(hours=24):
            user['tasks'] = {task: False for task in DEFAULT_TASKS}
            user['last_reset'] = now.isoformat()
            user['streak'] = user.get('streak', 0) + 1  # –£–≤–µ–ª–∏—á–∏–≤–∞–µ–º —Å—á–µ—Ç—á–∏–∫ –¥–Ω–µ–π
            user['sanctions_count'] = 0  # –°–±—Ä–∞—Å—ã–≤–∞–µ–º —Å—á–µ—Ç—á–∏–∫ —Å–∞–Ω–∫—Ü–∏–π –∑–∞ –¥–µ–Ω—å
            self.save_data()

    def get_random_sanction(self):
        """–í–æ–∑–≤—Ä–∞—â–∞–µ—Ç —Å–ª—É—á–∞–π–Ω—É—é —Å–∞–Ω–∫—Ü–∏—é"""
        return random.choice(SANCTIONS)

    def record_fail(self, user_id):
        """–ó–∞–ø–∏—Å—ã–≤–∞–µ–º –ø—Ä–æ–≤–∞–ª –∏ –≤–æ–∑–≤—Ä–∞—â–∞–µ–º —Å–∞–Ω–∫—Ü–∏—é"""
        user_id = str(user_id)
        if user_id in self.user_data:
            self.user_data[user_id]['sanctions_count'] = self.user_data[user_id].get('sanctions_count', 0) + 1
            self.user_data[user_id]['total_fails'] = self.user_data[user_id].get('total_fails', 0) + 1
            self.save_data()

        return self.get_random_sanction()

    def get_progress_message(self, tasks, user_id=None):
        """–°–æ–∑–¥–∞–µ–º —Å–æ–æ–±—â–µ–Ω–∏–µ —Å –ø—Ä–æ–≥—Ä–µ—Å—Å–æ–º"""
        total = len(tasks)
        completed = sum(1 for task in tasks.values() if task)
        percentage = (completed / total) * 100 if total > 0 else 0

        message = f"üìä **–°–¥–µ–ª–∞–ª —Å–µ–≥–æ–¥–Ω—è:**\n"
        message += f"‚úÖ –í—ã–ø–æ–ª–Ω–µ–Ω–æ: {completed}/{total} ({percentage:.1f}%)\n"

        # –î–æ–±–∞–≤–ª—è–µ–º –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—é –æ —Å–∞–Ω–∫—Ü–∏—è—Ö, –µ—Å–ª–∏ –ø–µ—Ä–µ–¥–∞–Ω user_id
        if user_id and str(user_id) in self.user_data:
            sanctions_today = self.user_data[str(user_id)].get('sanctions_count', 0)
            message += f" –°–ê–ù–ö–¶–ò–ò: {sanctions_today}\n"

        message += "\n"

        for task, is_done in tasks.items():
            status = "ü•∞" if is_done else "üòë"
            message += f"{status} {task}\n"

        return message

    def create_keyboard(self, tasks):
        """–°–æ–∑–¥–∞–µ–º –∫–ª–∞–≤–∏–∞—Ç—É—Ä—É —Å –∫–Ω–æ–ø–∫–∞–º–∏"""
        keyboard = []

        for task, is_done in tasks.items():
            button_text = f"ü•∞ {task}" if is_done else f"üòë {task}"
            callback_data = f"toggle_{task}"
            keyboard.append([InlineKeyboardButton(button_text, callback_data=callback_data)])

        # –î–æ–±–∞–≤–ª—è–µ–º –¥–æ–ø–æ–ª–Ω–∏—Ç–µ–ª—å–Ω—ã–µ –∫–Ω–æ–ø–∫–∏
        keyboard.append([
            InlineKeyboardButton("üîÑ –°–±—Ä–æ—Å–∏—Ç—å –≤—Å–µ", callback_data="reset_all"),
            InlineKeyboardButton("üòæ –ù–µ —Å–¥–µ–ª–∞–ª", callback_data="show_sanctions")
        ])

        keyboard.append([
            InlineKeyboardButton("–û—Ç—á–µ—Ç!", callback_data="show_stats")
        ])

        return InlineKeyboardMarkup(keyboard)

    def create_sanctions_keyboard(self):
        """–°–æ–∑–¥–∞–µ–º –∫–ª–∞–≤–∏–∞—Ç—É—Ä—É –¥–ª—è —Ä–∞–∑–¥–µ–ª–∞ —Å–∞–Ω–∫—Ü–∏–π"""
        keyboard = [
            [InlineKeyboardButton("üòà–ë–æ–≥ —Ä–µ—à–∏—Ç —Ç–≤–æ—é —Å—É–¥—å–±—É", callback_data="get_sanction")],
            [InlineKeyboardButton("üòàüòà –°–ø–∏—Å–æ–∫ –≤—Å–µ—Ö —Å–∞–Ω–∫—Ü–∏–π", callback_data="show_all_sanctions")],
            [InlineKeyboardButton("üîô –∫–∞–º–±—ç–∫", callback_data="back_to_tasks")]
        ]
        return InlineKeyboardMarkup(keyboard)


# –°–æ–∑–¥–∞–µ–º —ç–∫–∑–µ–º–ø–ª—è—Ä –±–æ—Ç–∞
bot_manager = HabitTrackerBot()


async def start(update: Update, context: ContextTypes.DEFAULT_TYPE) -> None:
    """–û–±—Ä–∞–±–æ—Ç—á–∏–∫ –∫–æ–º–∞–Ω–¥—ã /start"""
    user = update.effective_user
    user_id = user.id

    # –ü—Ä–∏–≤–µ—Ç—Å—Ç–≤–µ–Ω–Ω–æ–µ —Å–æ–æ–±—â–µ–Ω–∏–µ
    welcome_text = f"""
–ó–¥—Ä–∞–≤–∏—è –∂–µ–ª–∞—é, —Ç–æ–≤–∞—Ä–∏—â {user.first_name}! üëã

–Ø —Ç—É–ø–æ–π –±–æ—Ç –∫–æ—Ç–æ—Ä–æ–≥–æ –Ω–∞–ø–∏—Å–∞–ª–∏ —á—Ç–æ–±—ã —Ç—ã —Ç—ã–∫–∞–ª –∫–Ω–æ–ø–∫–∏ –∏ –Ω–µ –ª–µ–∂–∞–ª –Ω–∞ –¥–∏–≤–∞–Ω—á–∏–∫–µ –≤–µ—Å—å –¥–µ–Ω—å:)
–ù–æ –∏–Ω–æ–≥–¥–∞ –º–æ–∂–Ω–æ –ø–æ–∑–≤–æ–ª–∏—Ç—å —Å–µ–±–µ –ø–æ–±–ª–∞–∂–µ—á–∫—É, –≤–µ–¥—å –∫–∞—Ç—è —Ç–æ–∂–µ —Ö–æ—á–µ—Ç –∫—É—à–∞—Ç—åü•∫

–ü—Ä–∞–≤–∏–ª–∞ –ø—Ä–æ—Å—Ç—ã:
- –ñ–º–∏ –∫–Ω–æ–ø–∫—É —Å –∑–∞–¥–∞–Ω–∏–µ–º, –µ—Å–ª–∏ —Å–¥–µ–ª–∞–ª
- –ù–µ –≤—Ä–∏!!!
- –î–∞–Ω–Ω—ã–µ –∞–≤—Ç–æ–º–∞—Ç–∏—á–µ—Å–∫–∏ —Å–±—Ä–∞—Å—ã–≤–∞—é—Ç—Å—è –∫–∞–∂–¥—ã–µ 24 —á–∞—Å–∞

–£–¥–∞—á–∏! ü•∞ü•∞ü•∞
    """

    # –ü–æ–ª—É—á–∞–µ–º –∑–∞–¥–∞—á–∏ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
    tasks = bot_manager.get_user_tasks(user_id)

    # –û—Ç–ø—Ä–∞–≤–ª—è–µ–º —Å–æ–æ–±—â–µ–Ω–∏–µ —Å –∫–ª–∞–≤–∏–∞—Ç—É—Ä–æ–π
    await update.message.reply_text(
        welcome_text,
        reply_markup=bot_manager.create_keyboard(tasks),
        parse_mode='Markdown'
    )


async def handle_button_click(update: Update, context: ContextTypes.DEFAULT_TYPE) -> None:
    """–û–±—Ä–∞–±–æ—Ç—á–∏–∫ –Ω–∞–∂–∞—Ç–∏–π –Ω–∞ –∫–Ω–æ–ø–∫–∏"""
    query = update.callback_query
    user_id = query.from_user.id
    data = query.data

    await query.answer()  # –ü–æ–¥—Ç–≤–µ—Ä–∂–¥–∞–µ–º –Ω–∞–∂–∞—Ç–∏–µ

    # –ü–æ–ª—É—á–∞–µ–º —Ç–µ–∫—É—â–∏–µ –∑–∞–¥–∞—á–∏ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
    tasks = bot_manager.get_user_tasks(user_id)

    if data.startswith("toggle_"):
        # –ü–µ—Ä–µ–∫–ª—é—á–∞–µ–º —Å—Ç–∞—Ç—É—Å –∑–∞–¥–∞—á–∏
        task_name = data[7:]  # –£–±–∏—Ä–∞–µ–º "toggle_" –∏–∑ callback_data
        if task_name in tasks:
            tasks[task_name] = not tasks[task_name]
            bot_manager.save_data()

        # –û–±–Ω–æ–≤–ª—è–µ–º —Å–æ–æ–±—â–µ–Ω–∏–µ
        message = bot_manager.get_progress_message(tasks, user_id)
        await query.edit_message_text(
            text=message,
            reply_markup=bot_manager.create_keyboard(tasks),
            parse_mode='Markdown'
        )

    elif data == "reset_all":
        # –°–±—Ä–∞—Å—ã–≤–∞–µ–º –≤—Å–µ –∑–∞–¥–∞—á–∏
        for task in tasks:
            tasks[task] = False
        bot_manager.save_data()

        message = bot_manager.get_progress_message(tasks, user_id)
        await query.edit_message_text(
            text=message,
            reply_markup=bot_manager.create_keyboard(tasks),
            parse_mode='Markdown'
        )

    elif data == "show_sanctions":
        # –ü–æ–∫–∞–∑—ã–≤–∞–µ–º —Ä–∞–∑–¥–µ–ª —Å —Å–∞–Ω–∫—Ü–∏—è–º–∏
        await show_sanctions_section(update, context)

    elif data == "get_sanction":
        # –í—ã–¥–∞–µ–º —Å–ª—É—á–∞–π–Ω—É—é —Å–∞–Ω–∫—Ü–∏—é
        sanction = bot_manager.record_fail(user_id)
        sanction_message = f"""
üòî **–û –Ω–µ—Ç!**

‚öñÔ∏è **—Ç–≤–æ–µ –Ω–∞–∫–∞–∑–∞–Ω–∏–µ:**
{sanction}

        """

        await query.edit_message_text(
            text=sanction_message,
            reply_markup=bot_manager.create_sanctions_keyboard(),
            parse_mode='Markdown'
        )

    elif data == "show_all_sanctions":
        # –ü–æ–∫–∞–∑—ã–≤–∞–µ–º –≤—Å–µ –≤–æ–∑–º–æ–∂–Ω—ã–µ —Å–∞–Ω–∫—Ü–∏–∏
        sanctions_list = " **–í—Å–µ –≤–æ–∑–º–æ–∂–Ω—ã–µ —Å–∞–Ω–∫—Ü–∏–∏:**\n\n"
        for i, sanction in enumerate(SANCTIONS, 1):
            sanctions_list += f"{i}. {sanction}\n"

        await query.edit_message_text(
            text=sanctions_list,
            reply_markup=bot_manager.create_sanctions_keyboard(),
            parse_mode='Markdown'
        )

    elif data == "back_to_tasks":
        # –í–æ–∑–≤—Ä–∞—â–∞–µ–º—Å—è –∫ –∑–∞–¥–∞—á–∞–º
        message = bot_manager.get_progress_message(tasks, user_id)
        await query.edit_message_text(
            text=message,
            reply_markup=bot_manager.create_keyboard(tasks),
            parse_mode='Markdown'
        )

    elif data == "show_stats":
        # –ü–æ–∫–∞–∑—ã–≤–∞–µ–º —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫—É
        await show_statistics(update, context)


async def show_sanctions_section(update: Update, context: ContextTypes.DEFAULT_TYPE) -> None:
    """–ü–æ–∫–∞–∑—ã–≤–∞–µ—Ç —Ä–∞–∑–¥–µ–ª —Å —Å–∞–Ω–∫—Ü–∏—è–º–∏"""
    query = update.callback_query
    user_id = query.from_user.id

    sanctions_info = """
üòî **–†–∞–∑–¥–µ–ª —Å–∞–Ω–∫—Ü–∏–π**

–ö–æ—Ä–º–∏–º –∫–∞—Ç—é

üé≤ **¬´–ë–æ–≥ —Ä–µ—à–∏—Ç —Ç–≤–æ—é —Å—É–¥—å–±—É¬ª** - —Å–ª—É—á–∞–π–Ω–∞—è —Å–∞–Ω–∫—Ü–∏—è –∑–∞ –ø—Ä–æ–ø—É—â–µ–Ω–Ω—É—é –∑–∞–¥–∞—á—É
üìã **¬´–°–ø–∏—Å–æ–∫ –≤—Å–µ—Ö —Å–∞–Ω–∫—Ü–∏–π¬ª** - –ø–æ—Å–º–æ—Ç—Ä–µ—Ç—å –≤—Å–µ –≤–æ–∑–º–æ–∂–Ω—ã–µ —Å–∞–Ω–∫—Ü–∏–∏

    """

    await query.edit_message_text(
        text=sanctions_info,
        reply_markup=bot_manager.create_sanctions_keyboard(),
        parse_mode='Markdown'
    )


async def show_statistics(update: Update, context: ContextTypes.DEFAULT_TYPE) -> None:
    """–ü–æ–∫–∞–∑—ã–≤–∞–µ—Ç —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫—É –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è"""
    query = update.callback_query
    user_id = query.from_user.id
    user_data = bot_manager.user_data.get(str(user_id), {})

    tasks = user_data.get('tasks', {})
    completed = sum(1 for task in tasks.values() if task)
    total = len(tasks)
    streak = user_data.get('streak', 0)
    total_fails = user_data.get('total_fails', 0)
    sanctions_today = user_data.get('sanctions_count', 0)

    stats_text = f"""
üìà **–°–≤–æ–¥–Ω—ã–π –æ—Ç—á–µ—Ç:**

üê± **–°–µ–≥–æ–¥–Ω—è:** {completed}/{total} –≤—ã–ø–æ–ª–Ω–µ–Ω–æ
üê± **–ü—Ä–æ–µ–±—ã –∑–∞ —Å–µ–≥–æ–¥–Ω—è:** {sanctions_today}
üê± **–î–Ω–µ–π –±–µ–∑ –ø—Ä–æ–µ–±–æ–≤:** {streak} –¥–Ω–µ–π –ø–æ–¥—Ä—è–¥
üê± **–í—Å–µ–≥–æ –ø—Ä–æ–µ–±–æ–≤:** {total_fails}

–ü—Ä–æ–¥–æ–ª–∂–∞–π –≤ —Ç–æ–º –∂–µ –¥—É—Ö–µ, –î–∞–Ω–µ—á–∫–∞‚ù§Ô∏è
    """

    tasks = bot_manager.get_user_tasks(user_id)
    await query.edit_message_text(
        text=stats_text,
        reply_markup=bot_manager.create_keyboard(tasks),
        parse_mode='Markdown'
    )


async def help_command(update: Update, context: ContextTypes.DEFAULT_TYPE) -> None:
    """–û–±—Ä–∞–±–æ—Ç—á–∏–∫ –∫–æ–º–∞–Ω–¥—ã /help"""
    help_text = """
ü§ñ **–ö–æ–º–∞–Ω–¥—ã –±–æ—Ç–∞:**

/start - –ù–∞—á–∞—Ç—å —Ä–∞–±–æ—Ç—É —Å —Ç—Ä–µ–∫–µ—Ä–æ–º
/help - –ü–æ–∫–∞–∑–∞—Ç—å —ç—Ç—É —Å–ø—Ä–∞–≤–∫—É
/today - –ü–æ–∫–∞–∑–∞—Ç—å –∑–∞–¥–∞—á–∏ –Ω–∞ —Å–µ–≥–æ–¥–Ω—è

    """

    await update.message.reply_text(help_text)


async def show_today(update: Update, context: ContextTypes.DEFAULT_TYPE) -> None:
    """–ü–æ–∫–∞–∑—ã–≤–∞–µ—Ç –∑–∞–¥–∞—á–∏ –Ω–∞ —Å–µ–≥–æ–¥–Ω—è"""
    user_id = update.effective_user.id
    tasks = bot_manager.get_user_tasks(user_id)

    message = bot_manager.get_progress_message(tasks, user_id)
    await update.message.reply_text(
        text=message,
        reply_markup=bot_manager.create_keyboard(tasks),
        parse_mode='Markdown'
    )


def main() -> None:
    """–ó–∞–ø—É—Å–∫ –±–æ—Ç–∞"""
    # –°–æ–∑–¥–∞–µ–º –ø—Ä–∏–ª–æ–∂–µ–Ω–∏–µ
    updater = Updater(BOT_TOKEN)
    dispatcher = updater.dispatcher

    # –î–æ–±–∞–≤–ª—è–µ–º –æ–±—Ä–∞–±–æ—Ç—á–∏–∫–∏
    application.add_handler(CommandHandler("start", start))
    application.add_handler(CommandHandler("help", help_command))
    application.add_handler(CommandHandler("today", show_today))
    application.add_handler(CallbackQueryHandler(handle_button_click))

    # –ó–∞–ø—É—Å–∫–∞–µ–º –±–æ—Ç–∞
    print("–ë–æ—Ç –∑–∞–ø—É—â–µ–Ω! –ù–∞–∂–º–∏—Ç–µ Ctrl+C –¥–ª—è –æ—Å—Ç–∞–Ω–æ–≤–∫–∏")
    updater.start_polling()
    updater.idle()


if __name__ == "__main__":
    main()


